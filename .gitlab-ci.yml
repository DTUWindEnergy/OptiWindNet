stages:
  - test
  - deploy

workflow:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push"'
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'

# ===== TEST OptiWindNet linux =====
test_linux:
  stage: test
  image: python:3.12
  tags:  # runner platform
    - linux
  before_script:
    - apt-get update
    # CBC
    - apt-get install -y coinor-cbc
    # SCIP (use Debian 12 .deb)
    - curl -L -o scip.deb https://www.scipopt.org/download/release/SCIPOptSuite-9.2.3-Linux-debian12.deb
    # install with apt to auto-resolve dependencies (better than dpkg -i)
    - apt-get install -y ./scip.deb
    # Python deps
    - pip install pytest pytest-cov
    - python --version
    - pip install .[test]
  script:
    - pytest --cov-report term-missing:skip-covered --cov=optiwindnet --cov-config .coveragerc

# ===== TEST OptiWindNet windows =====
test_windows:
  stage: test
  image: registry.windenergy.dtu.dk/dockerimages/windows-miniconda:ltsc2019
  tags:
    - docker-windows
  variables:
    PY: "3.12"
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  script:
    - (conda shell.powershell hook) | Out-String | ?{$_} | Invoke-Expression   
    - conda config --add channels conda-forge
    - conda config --set channel_priority strict
    - conda create -n optiwindnet_env -y python=3.12 pip
    - conda activate optiwindnet_env
    - conda env update -n optiwindnet_env --prune -f environment.yml
    - conda install -n optiwindnet_env -y -c conda-forge coin-or-cbc scip
    - pip install -e .[test]
    - conda install -y cplex
    - pip install pytest pytest-cov
    - python --version
    - pytest --cov-report term-missing:skip-covered --cov=optiwindnet --cov-config .coveragerc

# ===== DEPLOY optiwindnet docs =====
# make_pages:
  # pages: true
  # when: manual
  # stage: deploy
  # tags: [linux]
  # script:
    # - apt-get update
    # - apt-get -y install make pandoc graphviz
    # - pip install .[docs] --upgrade
    # - cd docs; make html
    # - cd ../; mv docs/build/html public/
  # artifacts:
    # paths: [public]

# ===== DEPLOY publish optiwindnet on PyPI =====
pypi_linux:
  stage: deploy
  tags: [linux]
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+$/'
  script:
    - pip install --upgrade pip build twine packaging
    - python -m build
    - twine upload dist/* -u "$TWINE_USERNAME" -p "$TWINE_PASSWORD"
