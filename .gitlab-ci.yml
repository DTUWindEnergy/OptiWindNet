image: continuumio/miniconda3

# ===== TEST OptiWindNet linux=====
test_linux:
  stage:
    test
  script:
    - python --version
    - pip install --upgrade pip
    - pip install .[test]
    - python -c "from optiwindnet.interarraylib import G_from_S; from optiwindnet.mesh import make_planar_embedding"
    # - python -m pytest
  tags:  # runner platform
    - linux

# ===== TEST OptiWindNet windows=====
test_windows:
  # image: registry.windenergy.dtu.dk/dockerimages/windows-python:ltsc2019_py312
  image: registry.windenergy.dtu.dk/dockerimages/windows-miniconda:ltsc2019
  stage:
    test
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  script:
    # The next 3 lines install the Miniforge3 conda
    # - Invoke-WebRequest -UserAgent curl https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Windows-x86_64.exe -OutFile Miniforge3-Windows-x86_64.exe
    # - Start-Process -Wait -FilePath Miniforge3-Windows-x86_64.exe -ArgumentList "/InstallationType=JustMe","/RegisterPython=0","/S","/D=$($env:UserProfile)\condaforge"
    # - . "$($env:UserProfile)\condaforge\shell\condabin\conda-hook.ps1"
    - (conda shell.powershell hook) | Out-String | ?{$_} | Invoke-Expression
    - conda update conda
    - conda config --set solver libmamba
    - conda env create --file environment.yml
    - conda activate optiwindnet_env
    - where python
    - python --version
    - pip install -e .[test]
    - python -c "from optiwindnet.interarraylib import G_from_S; from optiwindnet.mesh import make_planar_embedding"
    # - pytest --cov-report term-missing:skip-covered --cov=optiwindnet --cov-config .coveragerc
  tags:
    - docker-windows

# ===== DEPLOY optiwindnet docs=====
make_pages:
  pages: true
  # rules:
  #   - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
  #     changes:
  #       - docs/**/*
  when: manual
  stage: deploy
  script:
    - apt-get update
    - apt-get -y install make pandoc graphviz
    - pip install .[docs] --upgrade
    - cd docs; make html
    - cd ../; mv docs/build/html public/
  artifacts:
    paths:
      - public
  tags: 
    - linux

# ===== DEPLOY publish optiwindnet on pypi=====
pypi_linux:
  rules:
    - if: $CI_COMMIT_TAG =~ /^v\d+.\d+.\d+/
  stage:
    deploy
  script:
    - pip install --upgrade pip build twine packaging
    - python3 -m build
    - twine upload dist/* -u $TWINE_USERNAME -p $TWINE_PASSWORD
  tags:
    - linux
